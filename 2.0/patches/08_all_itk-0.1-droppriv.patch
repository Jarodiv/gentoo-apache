diff -ur build-tree.orig/apache2/server/mpm/config.m4 build-tree/apache2/server/mpm/config.m4
--- build-tree.orig/apache2/server/mpm/config.m4	2005-08-05 19:58:29.000000000 +0200
+++ build-tree/apache2/server/mpm/config.m4	2005-08-05 20:01:29.000000000 +0200
@@ -29,6 +29,8 @@
 if test "$MPM_NAME" = "leader" -o "$MPM_NAME" = "threadpool" -o "$MPM_NAME" = "perchild" -o "$MPM_NAME" = "itk"; then
   AC_MSG_WARN(You have selected an EXPERIMENTAL MPM.  Be warned!)
   MPM_SUBDIR_NAME=experimental/$MPM_NAME
+
+  AC_CHECK_LIB(cap, cap_init)
 else
   MPM_SUBDIR_NAME=$MPM_NAME
 fi
diff -ur build-tree.orig/apache2/server/mpm/experimental/itk/itk.c build-tree/apache2/server/mpm/experimental/itk/itk.c
--- build-tree.orig/apache2/server/mpm/experimental/itk/itk.c	2005-08-05 19:58:29.000000000 +0200
+++ build-tree/apache2/server/mpm/experimental/itk/itk.c	2005-08-05 20:09:12.000000000 +0200
@@ -62,6 +62,9 @@
 #ifdef HAVE_SYS_PROCESSOR_H
 #include <sys/processor.h> /* for bindprocessor() */
 #endif
+#if HAVE_LIBCAP
+#include <sys/capability.h>
+#endif
 
 #include <signal.h>
 #include <sys/times.h>
@@ -471,6 +474,13 @@
     ap_sb_handle_t *sbh;
     apr_status_t rv;
     apr_bucket_alloc_t *bucket_alloc;
+#if HAVE_LIBCAP
+    cap_t caps;
+    cap_value_t suidcaps[] = {
+        CAP_SETUID,
+        CAP_SETGID
+    };
+#endif    
 
     mpm_state = AP_MPMQ_STARTING; /* for benefit of any hooks that run as this
                                   * child initializes
@@ -529,6 +539,22 @@
         pollset[i].reqevents = APR_POLLIN;
     }
 
+#if HAVE_LIBCAP
+    /* Drop as many privileges as we can. We'll still
+     * access files with uid=0, and we can setuid() to anything, but
+     * at least there's tons of other evilness (like loading kernel
+     * modules) we can't do directly.  (The setuid() capability will
+     * go away automatically when we setuid() or exec() -- the former
+     * is likely to come first.)
+     */
+    caps = cap_init();
+    cap_clear(caps);
+    cap_set_flag(caps, CAP_PERMITTED, sizeof(suidcaps)/sizeof(cap_value_t), suidcaps, CAP_SET);
+    cap_set_flag(caps, CAP_EFFECTIVE, sizeof(suidcaps)/sizeof(cap_value_t), suidcaps, CAP_SET);
+    cap_set_proc(caps);
+    cap_free(caps);
+#endif    
+    
     mpm_state = AP_MPMQ_RUNNING;
     
     bucket_alloc = apr_bucket_alloc_create(pchild);
